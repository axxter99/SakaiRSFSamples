<?xml version="1.0"?>
<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee 
	  http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
  version="2.4">

  <!-- CONFIG This is the base URL used to construct the full "portal URL" issued to
    end users (e.g. in mail notifications) that allows them to navigate the global
    Sakai instance so that a particular tool is visible. This URL will typically end
    in "portal" with no trailing slash. This facility should be provided
    by Sakai "Direct URLs" but currently I do not know how. This functionally
    actually unused by the demonstration tool in any case. -->
  <context-param>
    <param-name>portalurlbase</param-name>
    <param-value>http://girasol.caret.local:38080/portal</param-value>
  </context-param>
  <!-- CONFIG This is the name of the "punch-through" URL which will access the
    servlet directly bypassing the Sakai request filter. Paths beginning with
    / will be considered RELATIVE TO THE FIRST SLASH APPEARING IN THE REQUEST
    URL. Other paths will be considered as absolute URLS. -->
  <context-param>
    <param-name>resourceurlbase</param-name>
    <param-value>/SakaiRSFNumberGuess/</param-value>
  </context-param>
  <listener>
    <listener-class>org.sakaiproject.util.ToolListener</listener-class>
  </listener>

  <listener>
    <listener-class>
      org.sakaiproject.util.ContextLoaderListener
    </listener-class>
  </listener>

  <!-- Configure standard Spring application contexts. Be sure to mention
    rsf config files first, so any overrides may be processed. The first two
    config files are loaded from inside the rsfutil.jar  -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
      classpath:conf/rsf-config.xml,
      classpath:conf/blank-applicationContext.xml,
      classpath:conf/sakai-applicationContext.xml,
      /WEB-INF/applicationContext.xml
    </param-value>
  </context-param>
  <!-- Configure "request scope" Spring application contexts (RSAC).
    Be sure to mention rsf config files first, so any overrides may be
    processed. -->
  <context-param>
    <param-name>requestContextConfigLocation</param-name>
    <param-value>
      classpath:conf/rsf-requestscope-config.xml,
      classpath:conf/blank-requestContext.xml,
      classpath:conf/sakai-requestContext.xml,
      /WEB-INF/requestContext.xml
    </param-value>
  </context-param>

  <!--
    The Sakai Request Handler - standard stanza. Do NOT apply the sakai 
    request filter to anything that falls outside the "mapped path", in this
    instance, /faces/*. Anything that falls outside this path (interpreted
    as a resource URL) will be handled directly by the container (Tomcat).
  -->
  <filter>
    <filter-name>sakai.request</filter-name>
    <filter-class>org.sakaiproject.util.RequestFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>sakai.request</filter-name>
    <url-pattern>/faces/*</url-pattern>
    <!--    <servlet-name>sakai.rsf.numberguess</servlet-name> -->
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>FORWARD</dispatcher>
    <dispatcher>INCLUDE</dispatcher>
  </filter-mapping>

  <servlet>
    <!-- This servlet was named ToolSinkTunnel. However was renamed
      so that sakai.flowtalk appears in UI for Sakai 2.0, with
      new Sakai dispatching architecture -->
    <servlet-name>sakai.rsf.numberguess</servlet-name>
    <servlet-class>
      uk.ac.cam.caret.sakai.rsf.servlet.ReasonableSakaiServlet
    </servlet-class>
    <!--<load-on-startup>1</load-on-startup>-->
  </servlet>
  <!-- This is the mapping we would LIKE to apply, if it were supported by Sakai.
    Instead it is mocked up by SakaiRequestParser -->
  <servlet-mapping>
    <servlet-name>sakai.rsf.numberguess</servlet-name>
    <url-pattern>/faces/*</url-pattern>
  </servlet-mapping>
</web-app>